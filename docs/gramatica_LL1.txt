PROGRAM ::= STATEMENT | FUNCLIST | ε
FUNCLIST ::= FUNCDEF FUNCLIST'
FUNCDEF ::= def indent ( PARAMLIST ) { STATELIST }
PARAMLIST ::= string ident PARAMLIST''' | float ident PARAMLIST'' | int ident PARAMLIST' | ε
STATEMENT ::= VARDCL ; | ATRIBSTAT ; | PRINTSTAT ; | READSTAT ; | RETURNSTAT ; | IFSTAT | FORSTAT | { STATLIST } | break ; | ;
VARDECL ::= int ident NU | float ident NU | string ident NU
NU ::= [ int_constant ] NU | ε
ATRIBSTAT ::= LVALUE = ATRIBSTAT'
FUNCCALL ::= ident ( PARAMLISTCALL )
PARAMLISTCALL ::= ident PARAMLISTCALL' | ε
PRINTSTAT ::= print EXPRESSION
READSTAT ::= read LVALUE
RETURNSTAT ::= return
IFSTAT ::= if ( EXPRESSION ) STATEMENT IFSTAT'
FORSTAT ::= for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
STATELIST ::= VARDCL ; STATELIST' | LVALUE = ATRIBSTAT' ; STATELIST' | print EXPRESSION ; STATELIST' | read LVALUE ; STATELIST' | return ; STATELIST' | if ( EXPRESSION ) STATEMENT IFSTAT' STATELIST' | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST' | { STATLIST } STATELIST' | break ; STATELIST' | ; STATELIST'
ALLOCEXPRESSION ::= new ALLOCEXPRESSION'
ND ::= [ NUMEXPRESSION ] ND | ε
EXPRESSION ::= NUMEXPRESSION EXPRESSION'
NUMEXPRESSION ::= TERM NT
NT ::= + TERM NT | - TERM NT | ε
TERM ::= UNARYEXPR NQ
NQ ::= * UNARYEXPR NQ | / UNARYEXPR NQ | % UNARYEXPR NQ | ε
UNARYEXPR ::= FACTOR | + FACTOR | - FACTOR
FACTOR ::= int_constant | float_constant | string_constant | null | LVALUE | ( NUMEXPRESSION )
LVALUE ::= ident NC
NC ::= [ NUMEXPRESSION ] NC | ε
FUNCLIST' ::= def indent ( PARAMLIST ) { STATELIST } FUNCLIST' | ε
PARAMLIST' ::= , PARAMLIST | ε
PARAMLIST'' ::= , PARAMLIST | ε
PARAMLIST''' ::= , PARAMLIST | ε
ATRIBSTAT' ::= int_constant NQ NT EXPRESSION' | float_constant NQ NT EXPRESSION' | string_constant NQ NT EXPRESSION' | null NQ NT EXPRESSION' | ident NC NQ NT EXPRESSION' | ( NUMEXPRESSION ) NQ NT EXPRESSION' | + FACTOR NQ NT EXPRESSION' | - FACTOR NQ NT EXPRESSION' | new ALLOCEXPRESSION' | ident ( PARAMLISTCALL )
PARAMLISTCALL' ::= , PARAMLISTCALL | ε
IFSTAT' ::= else STATEMENT | ε
STATELIST' ::= VARDCL ; STATELIST' | ident NC = ATRIBSTAT' ; STATELIST' | print EXPRESSION ; STATELIST' | read LVALUE ; STATELIST' | return ; STATELIST' | if ( EXPRESSION ) STATEMENT IFSTAT' STATELIST' | for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST' | { STATLIST } STATELIST' | break ; STATELIST' | ; STATELIST' | ε
ALLOCEXPRESSION' ::= int [ NUMEXPRESSION ] ND | float [ NUMEXPRESSION ] ND | string [ NUMEXPRESSION ] ND
EXPRESSION' ::= ε | < NUMEXPRESSION | > NUMEXPRESSION | <= NUMEXPRESSION | >= NUMEXPRESSION | == NUMEXPRESSION | != NUMEXPRESSION
