PROGRAM -> {STATEMENT.next = newLabel()} STATEMENT
    {PROGRAM.code = STATEMENT.code || label(STATEMENT.next)}
PROGRAM -> {FUNCLIST.next = newLabel()} FUNCLIST
    {PROGRAM.code = FUNCLIST.code || label(FUNCLIST.next)}
PROGRAM -> ϵ
    {PROGRAM.code = ""}

FUNCLIST -> {FUNCDEF.next = newLabel()} FUNCDEF {FUNCLIST'.next = FUNCLIST.next} FUNCLIST'
    {FUNCLIST.code = FUNCDEF.code || label(FUNCDEF.next) || FUNCLIST'.code}

FUNCDEF -> def ident ( {PARAMLIST.next = newLabel()} PARAMLIST ) { {STATELIST.next = FUNCDEF.next} STATELIST }
    {FUNCDEF.code = PARAMLIST.code || label(PARAMLIST.next) || STATELIST.code}

PARAMLIST -> string ident {PARAMLIST'''.next = newLabel()} PARAMLIST'''
    {PARAMLIST.code = gen("param", ident.name, "string") || PARAMLIST'''.code || label(PARAMLIST'''.next)}
PARAMLIST -> float ident {PARAMLIST''.next = newLabel()} PARAMLIST''
    {PARAMLIST.code = gen("param", ident.name, "float") || PARAMLIST''.code || label(PARAMLIST''.next)}
PARAMLIST -> int ident {PARAMLIST'.next = newLabel()} PARAMLIST'
    {PARAMLIST.code = gen("param", ident.name, "int") || PARAMLIST'.code || label(PARAMLIST'.next)}
PARAMLIST -> ϵ
    {PARAMLIST.code = gen("goto", PARAMLIST.next)}

STATEMENT -> {VARDECL.next = newLabel()} VARDECL ;
    {STATEMENT.code = VARDECL.code || label(VARDECL.next)}
STATEMENT -> {ATRIBSTAT.next = newLabel()} ATRIBSTAT ;
    {STATEMENT.code = ATRIBSTAT.code || label(ATRIBSTAT.next)}
STATEMENT -> {PRINTSTAT.next = newLabel()} PRINTSTAT ;
    {STATEMENT.code = PRINTSTAT.code || label(PRINTSTAT.next)}
STATEMENT -> {READSTAT.next = newLabel()} READSTAT ;
    {STATEMENT.code = READSTAT.code || label(READSTAT.next)}
STATEMENT -> {RETURNSTAT.next = newLabel()} RETURNSTAT ;
    {STATEMENT.code = RETURNSTAT.code || label(RETURNSTAT.next)}
STATEMENT -> {IFSTAT.next = newLabel()} IFSTAT
    {STATEMENT.code = IFSTAT.code || label(IFSTAT.next)}
STATEMENT -> {FORSTAT.next = newLabel()} FORSTAT
    {STATEMENT.code = FORSTAT.code || label(FORSTAT.next)}
STATEMENT -> { {STATELIST.next = newLabel()} STATELIST }
    {STATEMENT.code = STATELIST.code || label(STATELIST.next)}
STATEMENT -> break ;
    {STATEMENT.code = gen("goto", STATEMENT.next)}
STATEMENT -> ;
    {STATEMENT.code = gen("goto", STATEMENT.next)}

VARDECL -> int ident {NU.next = newLabel()} NU
    {VARDECL.code = gen("declare", ident.name, "int") || NU.code || label(NU.next)}
VARDECL -> float ident {NU.next = newLabel()} NU
    {VARDECL.code = gen("declare", ident.name, "float") || NU.code || label(NU.next)}
VARDECL -> string ident {NU.next = newLabel()} NU
    {VARDECL.code = gen("declare", ident.name, "string") || NU.code || label(NU.next)}

NU -> [ int_constant ] {NU'.next = newLabel()} NU'
    {NU.code = gen("array", int_constant.value) || NU'.code || label(NU'.next)}
NU -> ϵ
    {NU.code = gen("goto", NU.next)}

EXPRESSION -> NUMEXPRESSION EXPRESSION'
    {EXPRESSION.place = NUMEXPRESSION.place;
    EXPRESSION.true = EXPRESSION'.true;
    EXPRESSION.false = EXPRESSION'.false;
    EXPRESSION.code = NUMEXPRESSION.code || EXPRESSION'.code}

EXPRESSION' -> < NUMEXPRESSION
    {EXPRESSION'.code = NUMEXPRESSION.code || gen("blt", EXPRESSION.place, NUMEXPRESSION.place, EXPRESSION.true) || gen("goto", EXPRESSION.false)}
EXPRESSION' -> > NUMEXPRESSION
    {EXPRESSION'.code = NUMEXPRESSION.code || gen("bgt", EXPRESSION.place, NUMEXPRESSION.place, EXPRESSION.true) || gen("goto", EXPRESSION.false)}
EXPRESSION' -> ϵ
    {EXPRESSION'.code = "")}

NUMEXPRESSION -> TERM NT
    {NUMEXPRESSION.place = TERM.place;
    NUMEXPRESSION.code = TERM.code || NT.code}

NT -> + TERM NT1
    {NT.code = TERM.code || NT1.code || gen("add", NT.place, TERM.place, NT1.place)}
NT -> - TERM NT1
    {NT.code = TERM.code || NT1.code || gen("sub", NT.place, TERM.place, NT1.place)}
NT -> ϵ
    {NT.code = ""}

TERM -> UNARYEXPR NQ
    {TERM.place = UNARYEXPR.place;
    TERM.code = UNARYEXPR.code || NQ.code}

NQ -> * UNARYEXPR NQ1
    {NQ.code = UNARYEXPR.code || NQ1.code || gen("mul", NQ.place, UNARYEXPR.place, NQ1.place)}
NQ -> / UNARYEXPR NQ1
    {NQ.code = UNARYEXPR.code || NQ1.code || gen("div", NQ.place, UNARYEXPR.place, NQ1.place)}
NQ -> ϵ
    {NQ.code = ""}

UNARYEXPR -> + FACTOR
    {UNARYEXPR.place = FACTOR.place;
    UNARYEXPR.code = FACTOR.code}
UNARYEXPR -> - FACTOR
    {UNARYEXPR.code = FACTOR.code || gen("neg", UNARYEXPR.place, FACTOR.place)}
UNARYEXPR -> FACTOR
    {UNARYEXPR.place = FACTOR.place;
    UNARYEXPR.code = FACTOR.code}

FACTOR -> int_constant
    {FACTOR.place = gen("const", int_constant.value)}
FACTOR -> float_constant
    {FACTOR.place = gen("const", float_constant.value)}
FACTOR -> ( EXPRESSION )
    {FACTOR.place = EXPRESSION.place;
    FACTOR.code = EXPRESSION.code}
FACTOR -> LVALUE
    {FACTOR.place = LVALUE.place
    FACTOR.code = LVALUE.code;}

IFSTAT -> if ( {EXPRESSION.true = newLabel(); EXPRESSION.false = IFSTAT.next} EXPRESSION ) {STATEMENT.next = IFSTAT.next} STATEMENT
    {IFSTAT.code = EXPRESSION.code || label(EXPRESSION.true) || STATEMENT.code || label(STATEMENT.next)}

FORSTAT -> for ( {ATRIBSTAT1.next = newLabel()} ATRIBSTAT1 ; {EXPRESSION.true = newLabel(); EXPRESSION.false = FORSTAT.next} EXPRESSION ; {ATRIBSTAT2.next = newLabel()} ATRIBSTAT2 ) {STATEMENT.next = newLabel()} STATEMENT
    {FORSTAT.code = ATRIBSTAT1.code || label(loopStart) || EXPRESSION.code || label(EXPRESSION.true) || STATEMENT.code || ATRIBSTAT2.code || gen("goto", loopStart) || label(EXPRESSION.false)}
