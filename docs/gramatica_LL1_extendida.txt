PROGRAM -> STATEMENT
PROGRAM -> FUNCLIST
PROGRAM -> ϵ
FUNCLIST -> FUNCDEF FUNCLIST'
FUNCDEF -> def ident ( PARAMLIST ) { STATELIST }
PARAMLIST -> string ident PARAMLIST'''
PARAMLIST -> float ident PARAMLIST''
PARAMLIST -> int ident PARAMLIST'
PARAMLIST -> ϵ
STATEMENT -> VARDECL ;
STATEMENT -> ATRIBSTAT ;
STATEMENT -> PRINTSTAT ;
STATEMENT -> READSTAT ;
STATEMENT -> RETURNSTAT ;
STATEMENT -> IFSTAT
STATEMENT -> FORSTAT
STATEMENT -> { STATELIST }
STATEMENT -> break ;
STATEMENT -> ;
VARDECL -> int ident NU
VARDECL -> float ident NU
VARDECL -> string ident NU
NU -> [ int_constant ] NU
NU -> ϵ
ATRIBSTAT -> LVALUE = ATRIBSTAT'
FUNCCALL -> ident ( PARAMLISTCALL )
PARAMLISTCALL -> ident PARAMLISTCALL'
PARAMLISTCALL -> ϵ
PRINTSTAT -> print EXPRESSION
READSTAT -> read LVALUE
RETURNSTAT -> return
IFSTAT -> if ( EXPRESSION ) STATEMENT IFSTAT'
FORSTAT -> for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
STATELIST -> int ident NU ; STATELIST'
STATELIST -> float ident NU ; STATELIST'
STATELIST -> string ident NU ; STATELIST'
STATELIST -> LVALUE = ATRIBSTAT' ; STATELIST'
STATELIST -> print EXPRESSION ; STATELIST'
STATELIST -> read LVALUE ; STATELIST'
STATELIST -> return ; STATELIST'
STATELIST -> if ( EXPRESSION ) STATEMENT IFSTAT' STATELIST'
STATELIST -> for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'
STATELIST -> { STATELIST } STATELIST'
STATELIST -> break ; STATELIST'
STATELIST -> ; STATELIST'
ALLOCEXPRESSION -> new ALLOCEXPRESSION'
ND -> [ NUMEXPRESSION ] ND
ND -> ϵ
EXPRESSION -> NUMEXPRESSION EXPRESSION'
NUMEXPRESSION -> TERM NT
NT -> + TERM NT
NT -> - TERM NT
NT -> ϵ
TERM -> UNARYEXPR NQ
NQ -> * UNARYEXPR NQ
NQ -> / UNARYEXPR NQ
NQ -> % UNARYEXPR NQ
NQ -> ϵ
UNARYEXPR -> FACTOR
UNARYEXPR -> + FACTOR
UNARYEXPR -> - FACTOR
FACTOR -> int_constant
FACTOR -> float_constant
FACTOR -> string_constant
FACTOR -> null
FACTOR -> LVALUE
FACTOR -> ( NUMEXPRESSION )
LVALUE -> ident NC
NC -> [ NUMEXPRESSION ] NC
NC -> ϵ
FUNCLIST' -> def ident ( PARAMLIST ) { STATELIST } FUNCLIST'
FUNCLIST' -> ϵ
PARAMLIST' -> , PARAMLIST
PARAMLIST' -> ϵ
PARAMLIST'' -> , PARAMLIST
PARAMLIST'' -> ϵ
PARAMLIST''' -> , PARAMLIST
PARAMLIST''' -> ϵ
ATRIBSTAT' -> int_constant NQ NT EXPRESSION'
ATRIBSTAT' -> float_constant NQ NT EXPRESSION'
ATRIBSTAT' -> string_constant NQ NT EXPRESSION'
ATRIBSTAT' -> null NQ NT EXPRESSION'
ATRIBSTAT' -> ( NUMEXPRESSION ) NQ NT EXPRESSION'
ATRIBSTAT' -> + FACTOR NQ NT EXPRESSION'
ATRIBSTAT' -> - FACTOR NQ NT EXPRESSION'
ATRIBSTAT' -> new ALLOCEXPRESSION'
ATRIBSTAT' -> ident ATRIBSTAT''
ATRIBSTAT'' -> ( PARAMLISTCALL )
ATRIBSTAT'' -> NC NQ NT EXPRESSION'
ATRIBSTAT'' -> ϵ
PARAMLISTCALL' -> , PARAMLISTCALL
PARAMLISTCALL' -> ϵ
IFSTAT' -> else STATEMENT
IFSTAT' -> ϵ
STATELIST' -> int ident NU ; STATELIST'
STATELIST' -> float ident NU ; STATELIST'
STATELIST' -> string ident NU ; STATELIST'
STATELIST' -> ident NC = ATRIBSTAT' ; STATELIST'
STATELIST' -> print EXPRESSION ; STATELIST'
STATELIST' -> read LVALUE ; STATELIST'
STATELIST' -> return ; STATELIST'
STATELIST' -> if ( EXPRESSION ) STATEMENT IFSTAT' STATELIST'
STATELIST' -> for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT STATELIST'
STATELIST' -> { STATELIST } STATELIST'
STATELIST' -> break ; STATELIST'
STATELIST' -> ; STATELIST'
STATELIST' -> ϵ
ALLOCEXPRESSION' -> int [ NUMEXPRESSION ] ND
ALLOCEXPRESSION' -> float [ NUMEXPRESSION ] ND
ALLOCEXPRESSION' -> string [ NUMEXPRESSION ] ND
EXPRESSION' -> ϵ
EXPRESSION' -> < NUMEXPRESSION
EXPRESSION' -> > NUMEXPRESSION
EXPRESSION' -> <= NUMEXPRESSION
EXPRESSION' -> >= NUMEXPRESSION
EXPRESSION' -> == NUMEXPRESSION
EXPRESSION' -> != NUMEXPRESSION
